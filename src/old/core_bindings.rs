/* automatically generated by rust-bindgen 0.55.1 */

pub const SHADE_PAINT_STYLE_FILL: ShadePaintStyle = 0;
pub const SHADE_PAINT_STYLE_STROKE: ShadePaintStyle = 1;
pub const SHADE_PAINT_STYLE_STROKE_AND_FILL: ShadePaintStyle = 2;
pub type ShadePaintStyle = ::std::os::raw::c_uint;
pub const SHADE_STROKE_CAP_BUTT: ShadeStrokeCap = 0;
pub const SHADE_STROKE_CAP_ROUND: ShadeStrokeCap = 1;
pub const SHADE_STROKE_CAP_SQUARE: ShadeStrokeCap = 2;
pub type ShadeStrokeCap = ::std::os::raw::c_uint;
pub const SHADE_STROKE_JOIN_MITER: ShadeStrokeJoin = 0;
pub const SHADE_STROKE_JOIN_ROUND: ShadeStrokeJoin = 1;
pub const SHADE_STROKE_JOIN_BEVEL: ShadeStrokeJoin = 2;
pub type ShadeStrokeJoin = ::std::os::raw::c_uint;
pub const SHADE_PATH_FILL_TYPE_WINDING: ShadePathFillType = 0;
pub const SHADE_PATH_FILL_TYPE_EVEN_ODD: ShadePathFillType = 1;
pub const SHADE_PATH_FILL_TYPE_INVERSE_WINDING: ShadePathFillType = 2;
pub const SHADE_PATH_FILL_TYPE_INVERSE_EVEN_ODD: ShadePathFillType = 3;
pub type ShadePathFillType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ShadeSurface {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ShadeCanvas {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ShadePaint {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ShadePath {
    _unused: [u8; 0],
}
extern "C" {
    pub fn shade_surface_create_rgba(
        width: u32,
        height: u32,
        pixels: *mut u8,
        row_bytes: *const usize,
    ) -> *mut ShadeSurface;
}
extern "C" {
    pub fn shade_surface_create_rgba_premultiplied(
        width: u32,
        height: u32,
        pixels: *mut u8,
        row_bytes: *const usize,
    ) -> *mut ShadeSurface;
}
extern "C" {
    pub fn shade_surface_destroy(surface: *mut ShadeSurface);
}
extern "C" {
    pub fn shade_surface_get_canvas(surface: *mut ShadeSurface) -> *mut ShadeCanvas;
}
extern "C" {
    pub fn shade_is_surface_bgra() -> bool;
}
extern "C" {
    pub fn shade_canvas_clear(canvas: *mut ShadeCanvas, color: u32);
}
extern "C" {
    pub fn shade_canvas_flush(canvas: *mut ShadeCanvas);
}
extern "C" {
    pub fn shade_canvas_save(canvas: *mut ShadeCanvas);
}
extern "C" {
    pub fn shade_canvas_restore(canvas: *mut ShadeCanvas);
}
extern "C" {
    pub fn shade_canvas_scale(canvas: *mut ShadeCanvas, sx: f32, sy: f32);
}
extern "C" {
    pub fn shade_canvas_translate(canvas: *mut ShadeCanvas, dx: f32, dy: f32);
}
extern "C" {
    pub fn shade_canvas_set_matrix(canvas: *mut ShadeCanvas, matrix: *const f32);
}
extern "C" {
    pub fn shade_canvas_concat(canvas: *mut ShadeCanvas, matrix: *const f32);
}
extern "C" {
    pub fn shade_canvas_get_total_matrix(canvas: *mut ShadeCanvas, matrix: *mut f32);
}
extern "C" {
    pub fn shade_canvas_draw_path(
        canvas: *mut ShadeCanvas,
        path: *mut ShadePath,
        paint: *mut ShadePaint,
    );
}
extern "C" {
    pub fn shade_canvas_draw_rect(
        canvas: *mut ShadeCanvas,
        x: f32,
        y: f32,
        w: f32,
        h: f32,
        paint: *mut ShadePaint,
    );
}
extern "C" {
    pub fn shade_matrix_create_inverse(matrix: *const f32, inverse: *mut f32) -> bool;
}
extern "C" {
    pub fn shade_paint_create() -> *mut ShadePaint;
}
extern "C" {
    pub fn shade_paint_destroy(paint: *mut ShadePaint);
}
extern "C" {
    pub fn shade_paint_get_style(paint: *mut ShadePaint) -> ShadePaintStyle;
}
extern "C" {
    pub fn shade_paint_set_style(paint: *mut ShadePaint, style: ShadePaintStyle);
}
extern "C" {
    pub fn shade_paint_get_color(paint: *mut ShadePaint) -> u32;
}
extern "C" {
    pub fn shade_paint_set_color(paint: *mut ShadePaint, color: u32);
}
extern "C" {
    pub fn shade_paint_is_anti_alias(paint: *mut ShadePaint) -> bool;
}
extern "C" {
    pub fn shade_paint_set_anti_alias(paint: *mut ShadePaint, aa: bool);
}
extern "C" {
    pub fn shade_paint_get_stroke_width(paint: *mut ShadePaint) -> f32;
}
extern "C" {
    pub fn shade_paint_set_stroke_width(paint: *mut ShadePaint, width: f32);
}
extern "C" {
    pub fn shade_paint_get_stroke_cap(paint: *mut ShadePaint) -> ShadeStrokeCap;
}
extern "C" {
    pub fn shade_paint_set_stroke_cap(paint: *mut ShadePaint, cap: ShadeStrokeCap);
}
extern "C" {
    pub fn shade_paint_get_stroke_join(paint: *mut ShadePaint) -> ShadeStrokeJoin;
}
extern "C" {
    pub fn shade_paint_set_stroke_join(paint: *mut ShadePaint, join: ShadeStrokeJoin);
}
extern "C" {
    pub fn shade_paint_get_stroke_miter(paint: *mut ShadePaint) -> f32;
}
extern "C" {
    pub fn shade_paint_set_stroke_miter(paint: *mut ShadePaint, miter: f32);
}
extern "C" {
    pub fn shade_paint_reset(paint: *mut ShadePaint);
}
extern "C" {
    pub fn shade_path_create() -> *mut ShadePath;
}
extern "C" {
    pub fn shade_path_destroy(path: *mut ShadePath);
}
extern "C" {
    pub fn shade_path_get_fill_type(path: *mut ShadePath) -> ShadePathFillType;
}
extern "C" {
    pub fn shade_path_set_fill_type(path: *mut ShadePath, type_: ShadePathFillType);
}
extern "C" {
    pub fn shade_path_move_to(path: *mut ShadePath, x: f32, y: f32);
}
extern "C" {
    pub fn shade_path_line_to(path: *mut ShadePath, x: f32, y: f32);
}
extern "C" {
    pub fn shade_path_quad_to(path: *mut ShadePath, x1: f32, y1: f32, x2: f32, y2: f32);
}
extern "C" {
    pub fn shade_path_conic_to(path: *mut ShadePath, x1: f32, y1: f32, x2: f32, y2: f32, w: f32);
}
extern "C" {
    pub fn shade_path_cubic_to(
        path: *mut ShadePath,
        x1: f32,
        y1: f32,
        x2: f32,
        y2: f32,
        x3: f32,
        y3: f32,
    );
}
extern "C" {
    pub fn shade_path_close(path: *mut ShadePath);
}
extern "C" {
    pub fn shade_path_reset(path: *mut ShadePath);
}
extern "C" {
    pub fn shade_path_rewind(path: *mut ShadePath);
}
extern "C" {
    pub fn shade_path_count_points(path: *mut ShadePath) -> usize;
}
extern "C" {
    pub fn shade_path_count_verbs(path: *mut ShadePath) -> usize;
}
extern "C" {
    pub fn shade_path_get_bounds(
        path: *mut ShadePath,
        left: *mut f32,
        top: *mut f32,
        right: *mut f32,
        bottom: *mut f32,
    );
}
extern "C" {
    pub fn shade_path_compute_tight_bounds(
        path: *mut ShadePath,
        left: *mut f32,
        top: *mut f32,
        right: *mut f32,
        bottom: *mut f32,
    );
}
